/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import conexion.ConexionMariaDB;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Animal;
import control.Controlador;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JPopupMenu;
import view.Menu_view;

/**
 *
 * @author yecum
 */
/**
 * La clase Animal_view representa la interfaz gráfica para la visualización de animales.
 */
public class Animal_view extends javax.swing.JFrame {

    // Instancia de la clase de conexión a la base de datos
    ConexionMariaDB condb = new ConexionMariaDB();

    // Conexión a la base de datos
    Connection conet;

    // Modelo de tabla por defecto para la visualización de animales
    DefaultTableModel modelo;

    // Declaración de una instancia de Statement para ejecutar consultas SQL
    Statement st;

    // ResultSet para almacenar el resultado de una consulta SQL
    ResultSet rs;

    // Identificador del animal seleccionado
    int idc;

    // Controlador asociado a la vista
    private Controlador controlador;

    /**
     * Constructor de la clase Animal_view.
     * Inicializa los componentes de la interfaz y realiza la consulta inicial para cargar los datos en la tabla.
     */
    public Animal_view() {
        initComponents();

        // Centrar la ventana en la pantalla
        setLocationRelativeTo(null);

        // Realizar la consulta inicial para cargar los datos en la tabla
        Consultar();
    }
    
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        txtEspecie = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        txtRaza = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Animal");

        jLabel2.setText("Nombre");

        jLabel3.setText("Identificación");

        jLabel4.setText("Especie");

        jLabel5.setText("Edad");

        jLabel6.setText("Raza");

        txtId.setEditable(false);
        txtId.setEnabled(false);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Especie", "Edad", "Raza", "Fecha_Ingreso"
            }
        ));
        tblDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDatos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel2))
                                .addGap(125, 125, 125)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRaza, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(97, 97, 97)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregar)
                            .addComponent(btnVolver)
                            .addComponent(btnModificar)
                            .addComponent(btnEliminar)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVolver))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        Modificar();
        Consultar();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        Menu_view menu = new Menu_view();
        menu.setVisible(true);
        menu.setResizable(false);
        menu.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        Agregar();
        Consultar();
        limpiarCosos();


    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        Eliminar();
        Consultar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseClicked
        int fila = tblDatos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "No se selecciono ninguna fila");
        } else {
            idc = Integer.parseInt((String) tblDatos.getValueAt(fila, 0).toString());
            String nom = (String) tblDatos.getValueAt(fila, 1);
            String esp = (String) tblDatos.getValueAt(fila, 2);
            String edad = (String) tblDatos.getValueAt(fila, 3);
            String raza = (String) tblDatos.getValueAt(fila, 4);

            txtId.setText("" + idc);
            txtNombre.setText(nom);
            txtEspecie.setText(esp);
            txtEdad.setText(edad);
            txtRaza.setText(raza);

        }
    }//GEN-LAST:event_tblDatosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Animal_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Animal_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Animal_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Animal_view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Animal_view().setVisible(true);
            }
        });
    }
/**
 * Consulta y muestra los datos de la base de datos en la tabla de la interfaz gráfica.
 */
    public void Consultar() {
        String sql = "SELECT * FROM registro";

        try {
            // Establecer la conexión a la base de datos
            conet = condb.getCon();
            st = conet.createStatement();
            rs = st.executeQuery(sql);
            // Crear un arreglo para almacenar los datos de cada fila
            Object[] animalito = new Object[6];
             // Modelo de tabla por defecto para la visualización de datos
            modelo = (DefaultTableModel) tblDatos.getModel();
            // Formateador de fecha
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            while (rs.next()) {
                // Obtener datos de la base de datos
                animalito[0] = rs.getInt("Id");
                animalito[1] = rs.getString("Nombre");
                animalito[2] = rs.getString("Especie");
                animalito[3] = rs.getString("Edad");
                animalito[4] = rs.getString("Raza");
                // Obtén la fecha de la base de datos
                Timestamp timestamp = rs.getTimestamp("Fecha_Ingreso");

                // Verifica si la fecha no es nula antes de formatearla
                if (timestamp != null) {
                    // Formatea la fecha
                    animalito[5] = sdf.format(timestamp);
                } else {
                    // En caso de que la fecha sea nula, asigna un valor por defecto o muestra un mensaje
                    animalito[5] = "Fecha no disponible";
                }

                modelo.addRow(animalito);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void limpiarCosos() {
        txtNombre.setText("");
        txtEspecie.setText("");
        txtEdad.setText("");
        txtRaza.setText("");

    }
//agrega los datos a la base de datos
    public void Agregar() {
        String nom = txtNombre.getText();
        String esp = txtEspecie.getText();
        String edad = txtEdad.getText();
        String raza = txtRaza.getText();

        try {
            if (nom.equals("") || esp.equals("") || edad.equals("") || raza.equals("")) {
                JOptionPane.showMessageDialog(null, "Porfavor Ingrese todos los datos");
                limpiarCampos();
            } else {
                String sql = "INSERT INTO registro (Nombre, Especie, Edad, Raza, Fecha_Ingreso) VALUES ('" + nom + "','" + esp + "','" + edad + "','" + raza + "', CURRENT_TIME())";
                conet = condb.getCon();
                st = conet.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Nuevo Animal Agregado Exitosamente ");
                limpiarCampos();
                Consultar();
            }
        } catch (Exception e) {
        }

    }

    public void limpiarCampos() {
        for (int i = 0; i <= tblDatos.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }
//modifica un objeto de la base de datos
    public void Modificar() {
        String nom = txtNombre.getText();
        String esp = txtEspecie.getText();
        String edad = txtEdad.getText();
        String raza = txtRaza.getText();

        try {
            if (nom.equals("") || esp.equals("") || edad.equals("") || raza.equals("")) {
                JOptionPane.showMessageDialog(null, "Porfavor Ingrese todos los datos");

            } else {
                String sql = "UPDATE registro SET Id = '" + idc + "',Nombre ='" + nom + "',Especie ='" + esp + "',Edad ='" + edad + "',Raza ='" + raza + "' WHERE Id =" + idc;
                conet = condb.getCon();
                st = conet.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Datos del Animal Modificados  ");
                limpiarCampos();
                Consultar();
            }
        } catch (Exception e) {
        }

    }
//elimina un objeto de lo base de datos
    public void Eliminar() {
        int fila = tblDatos.getSelectedRow();
        try {
            if (fila < 0) {
                JOptionPane.showMessageDialog(null, "Animal no seleccionado");
                limpiarCampos();
            } else {
                String sql = "DELETE FROM registro WHERE Id =" + idc;
                conet = condb.getCon();
                st = conet.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Animal Eliminado");
                limpiarCampos();

            }
        } catch (Exception e) {
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnAgregar;
    public javax.swing.JButton btnEliminar;
    public javax.swing.JButton btnModificar;
    public javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tblDatos;
    public javax.swing.JTextField txtEdad;
    public javax.swing.JTextField txtEspecie;
    public javax.swing.JTextField txtId;
    public javax.swing.JTextField txtNombre;
    public javax.swing.JTextField txtRaza;
    // End of variables declaration//GEN-END:variables
}
